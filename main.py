import hashlib
import requests
import sys
import string
import random
from PyQt5.QtWidgets import QApplication, QWidget, QLineEdit, QPushButton, QLabel
from PyQt5.QtGui import QPixmap, QPalette, QBrush
from PyQt5.QtCore import Qt

class PasswordChecker(QWidget):
    def check_pwned_password(self):
        password = self.input.text()

        if not password:
            self.result.setText("‚ö†Ô∏è –°–ø–æ—á–∞—Ç–∫—É –≤–≤–µ–¥–∏ –ø–∞—Ä–æ–ª—å.")
            self.strength_label.setText("")
            return

        # –•–µ—à—É–≤–∞–Ω–Ω—è –ø–∞—Ä–æ–ª—è (SHA1)
        sha1 = hashlib.sha1(password.encode('utf-8')).hexdigest().upper()
        prefix = sha1[:5]
        suffix = sha1[5:]

        # –ó–∞–ø–∏—Ç –¥–æ API HaveIBeenPwned
        url = f"https://api.pwnedpasswords.com/range/{prefix}"
        try:
            response = requests.get(url)
            if response.status_code != 200:
                self.result.setText("‚ö†Ô∏è –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –∑–≤–µ—Ä–Ω–µ–Ω–Ω—ñ –¥–æ HIBP API.")
                self.strength_label.setText("")
                return
        except Exception as e:
            self.result.setText(f"‚ö†Ô∏è –ü–æ–º–∏–ª–∫–∞ –º–µ—Ä–µ–∂—ñ: {str(e)}")
            self.strength_label.setText("")
            return

        # –ü–æ—à—É–∫ —É –≤—ñ–¥–ø–æ–≤—ñ–¥—è—Ö
        hashes = (line.split(':') for line in response.text.splitlines())
        for h, count in hashes:
            if h == suffix:
                self.result.setText(f"‚ùå –¶–µ–π –ø–∞—Ä–æ–ª—å –∑–ª–∏—Ç–∏–π! –ó–Ω–∞–π–¥–µ–Ω–æ {count} —Ä–∞–∑(—ñ–≤) —É –±–∞–∑—ñ.")
                self.strength_label.setText("")
                return

        self.result.setText("‚úÖ –¶–µ–π –ø–∞—Ä–æ–ª—å **–Ω–µ –∑–ª–∏—Ç–∏–π** —É –ø—É–±–ª—ñ—á–Ω–∏—Ö –±–∞–∑–∞—Ö.")
        self.strength_label.setText("")
    def __init__(self):
        super().__init__()

        self.setWindowTitle("PSC")
        self.setGeometry(170, 50, 1080, 720)

        # üîπ –§–æ–Ω
        background = QPixmap("cybersecurity_background.png")
        palette = QPalette()
        palette.setBrush(QPalette.Window, QBrush(background))
        self.setPalette(palette)

        # üîπ –ü–æ–ª–µ –¥–ª—è –≤–≤–µ–¥–µ–Ω–Ω—è –ø–∞—Ä–æ–ª—è
        self.input = QLineEdit(self)
        self.input.setEchoMode(QLineEdit.Normal)
        self.input.setPlaceholderText("–í–≤–µ–¥–∏ —Å–≤—ñ–π –ø–∞—Ä–æ–ª—å")
        self.input.setGeometry(100, 100, 300, 40)
        self.input.setStyleSheet("border-radius: 10px;")

        # üîπ –ö–Ω–æ–ø–∫–∞ –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏ –ø–∞—Ä–æ–ª—è –∑–∞ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–∞–º–∏ (–¥–æ–≤–∂–∏–Ω–∞, —Ü–∏—Ñ—Ä–∏ —Ç–æ—â–æ)
        self.check_button = QPushButton("–ü–µ—Ä–µ–≤—ñ—Ä–∏—Ç–∏ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–∏–π –ø–∞—Ä–æ–ª—å", self)
        self.check_button.setGeometry(100, 160, 300, 40)
        self.check_button.setStyleSheet("font-size: 18px; background-color: #2E8B57 ; color: white; border-radius: 10px;")
        self.check_button.clicked.connect(self.check_password)

        # üîπ –ö–Ω–æ–ø–∫–∞ –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏ –ø–∞—Ä–æ–ª—è –≤ —Å–ø–∏—Å–∫—É –ø–æ–ø—É–ª—è—Ä–Ω–∏—Ö –ø–∞—Ä–æ–ª—ñ–≤
        self.check_list_button = QPushButton("–ü–µ—Ä–µ–≤—ñ—Ä–∏—Ç–∏ –≤ —Å–ø–∏—Å–∫—É –ø–æ–ø—É–ª—è—Ä–Ω–∏—Ö", self)
        self.check_list_button.setGeometry(100, 220, 300, 40)
        self.check_list_button.setStyleSheet("font-size: 18px; background-color: #C62828; color: white; border-radius: 10px;")
        self.check_list_button.clicked.connect(self.check_password_in_list)

        # üîπ –ö–Ω–æ–ø–∫–∞ –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏ –ø–∞—Ä–æ–ª—è –≤ —Å–ø–∏—Å–∫—É –∑–ª–∏—Ç–∏—Ö –ø–∞—Ä–æ–ª—ñ–≤
        self.check_pwned_button = QPushButton("–ü–µ—Ä–µ–≤—ñ—Ä–∏—Ç–∏ —É –∑–ª–∏—Ç–∏—Ö –±–∞–∑–∞—Ö (HIBP)", self)
        self.check_pwned_button.setGeometry(100, 280, 300, 40)
        self.check_pwned_button.setStyleSheet("font-size: 18px; background-color: #283593; color: white; border-radius: 10px;")
        self.check_pwned_button.clicked.connect(self.check_pwned_password)

        # üîπ –ö–Ω–æ–ø–∫–∞ –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏ –ø–∞—Ä–æ–ª—è –Ω–∞ –Ω–∞–¥—ñ–π–Ω—ñ—Å—Ç—å
        self.crack_time_button = QPushButton("–°–∫—ñ–ª—å–∫–∏ —á–∞—Å—É —Ç—Ä–µ–±–∞ –Ω–∞ –∑–ª–æ–º?", self)
        self.crack_time_button.setGeometry(100, 340, 300, 40)
        self.crack_time_button.setStyleSheet("font-size: 18px; background-color: #EF6C00; color: white; border-radius: 10px;")
        self.crack_time_button.clicked.connect(self.estimate_crack_time)

        # –ö–Ω–æ–ø–∫–∞, —è–∫–∞ –∑–∞–ø—É—Å–∫–∞—î –≥–µ–Ω–µ—Ä–∞—Ü—ñ—é (–µ—Ç–∞–ø 1)
        self.start_generate_button = QPushButton("–ó–≥–µ–Ω–µ—Ä—É–≤–∞—Ç–∏ –Ω–∞–¥—ñ–π–Ω–∏–π –ø–∞—Ä–æ–ª—å", self)
        self.start_generate_button.setGeometry(100, 400, 300, 40)
        self.start_generate_button.setStyleSheet("font-size: 18px; background-color: #6A1B9A; color: white; border-radius: 10px;")
        self.start_generate_button.clicked.connect(self.show_length_input)

        # –ü–æ–ª–µ –¥–ª—è –≤–≤–µ–¥–µ–Ω–Ω—è –¥–æ–≤–∂–∏–Ω–∏ –ø–∞—Ä–æ–ª—è (–ø—Ä–∏—Ö–æ–≤–∞–Ω–æ —Å–ø–æ—á–∞—Ç–∫—É)
        self.length_input = QLineEdit(self)
        self.length_input.setPlaceholderText("–í–≤–µ–¥–∏ –¥–æ–≤–∂–∏–Ω—É –ø–∞—Ä–æ–ª—è")
        self.length_input.setGeometry(100, 400, 300, 40)
        self.length_input.setStyleSheet("font-size: 12px; border-radius: 10px;")
        self.length_input.hide()

        # –ö–Ω–æ–ø–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü—ñ—ó (–ø—Ä–∏—Ö–æ–≤–∞–Ω–∞ —Å–ø–æ—á–∞—Ç–∫—É)
        self.generate_button = QPushButton("–ó–≥–µ–Ω–µ—Ä—É–≤–∞—Ç–∏", self)
        self.generate_button.setGeometry(100, 460, 300, 40)
        self.generate_button.setStyleSheet("font-size: 18px; background-color: #6A1B9A; color: white; border-radius: 10px;")
        self.generate_button.clicked.connect(self.generate_password)
        self.generate_button.hide()

        # üîπ –†–µ–∑—É–ª—å—Ç–∞—Ç
        self.result = QLabel(self)
        self.result.setGeometry(100, 500, 600, 200)
        self.result.setStyleSheet("color: white; font-size: 16px;")
        self.result.setWordWrap(True)

        # üîπ –û—Ü—ñ–Ω–∫–∞ —Å–∏–ª–∏ –ø–∞—Ä–æ–ª—è
        self.strength_label = QLabel(self)
        self.strength_label.setGeometry(100, 650, 700, 50)
        self.strength_label.setStyleSheet("font-size: 20px; color: yellow;")
        self.strength_label.setWordWrap(True)

        # üîπ –°–ø–∏—Å–æ–∫ –ø–æ–ø—É–ª—è—Ä–Ω–∏—Ö –ø–∞—Ä–æ–ª—ñ–≤
        self.popular_passwords = ["123456", "password", "admin", "qwerty", "letmein"]

    # üîπ –§—É–Ω–∫—Ü—ñ—è –¥–ª—è –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏ –ø–∞—Ä–æ–ª—è –∑–∞ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–∞–º–∏ (–¥–æ–≤–∂–∏–Ω–∞, —Ü–∏—Ñ—Ä–∏, –≤–µ–ª–∏–∫—ñ/–º–∞–ª—ñ –ª—ñ—Ç–µ—Ä–∏, —Å–ø–µ—Ü—Å–∏–º–≤–æ–ª–∏)
    def check_password(self):
        password = self.input.text()
        messages = []

        has_digit = any(char.isdigit() for char in password)
        has_upper = any(char.isupper() for char in password)
        has_lower = any(char.islower() for char in password)
        has_special = any(char in string.punctuation for char in password)

        if len(password) < 8:
            messages.append("‚ö†Ô∏è –ü–∞—Ä–æ–ª—å –Ω–∞–¥—Ç–æ –∫–æ—Ä–æ—Ç–∫–∏–π!")
        else:
            messages.append("‚úÖ –î–æ–≤–∂–∏–Ω–∞ –ø–∞—Ä–æ–ª—è –¥–æ—Å—Ç–∞—Ç–Ω—è.")

        if has_digit:
            messages.append("‚úÖ –Ñ —Ü–∏—Ñ—Ä–∏.")
        else:
            messages.append("‚ùå –ù–µ–º–∞—î —Ü–∏—Ñ—Ä.")

        if has_upper:
            messages.append("‚úÖ –Ñ –≤–µ–ª–∏–∫—ñ –ª—ñ—Ç–µ—Ä–∏.")
        else:
            messages.append("‚ùå –ù–µ–º–∞—î –≤–µ–ª–∏–∫–∏—Ö –ª—ñ—Ç–µ—Ä.")

        if has_lower:
            messages.append("‚úÖ –Ñ –º–∞–ª—ñ –ª—ñ—Ç–µ—Ä–∏.")
        else:
            messages.append("‚ùå –ù–µ–º–∞—î –º–∞–ª–∏—Ö –ª—ñ—Ç–µ—Ä.")

        if has_special:
            messages.append("‚úÖ –Ñ —Å–ø–µ—Ü—Å–∏–º–≤–æ–ª–∏.")
        else:
            messages.append("‚ùå –ù–µ–º–∞—î —Å–ø–µ—Ü—Å–∏–º–≤–æ–ª—ñ–≤.")

        # –í–∏–≤–µ–¥–µ–Ω–Ω—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ñ–≤ –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏
        self.result.setText("\n".join(messages))

        # üîπ –û—Ü—ñ–Ω–∫–∞ —Å–∏–ª–∏ –ø–∞—Ä–æ–ª—è
        strength = 0
        if len(password) >= 8:
            strength += 1
        if has_digit:
            strength += 1
        if has_upper:
            strength += 1
        if has_lower:
            strength += 1
        if has_special:
            strength += 1

        # üîπ –ü—ñ–¥—Å—É–º–∫–æ–≤–∞ –æ—Ü—ñ–Ω–∫–∞
        if strength == 5:
            final_msg = "üîê –ü–∞—Ä–æ–ª—å –Ω–∞–¥—ñ–π–Ω–∏–π ‚úÖ"
        elif strength >= 3:
            final_msg = "üõ°Ô∏è –ü–∞—Ä–æ–ª—å —Å–µ—Ä–µ–¥–Ω—ñ–π ‚ö†Ô∏è"
        else:
            final_msg = "üö´ –ü–∞—Ä–æ–ª—å —Å–ª–∞–±–∫–∏–π ‚ùå"

        self.strength_label.setText(final_msg)

    # üîπ –§—É–Ω–∫—Ü—ñ—è –¥–ª—è –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏ –ø–∞—Ä–æ–ª—è –≤ —Å–ø–∏—Å–∫—É –ø–æ–ø—É–ª—è—Ä–Ω–∏—Ö –ø–∞—Ä–æ–ª—ñ–≤
    def check_password_in_list(self):
        password = self.input.text()
        if password in self.popular_passwords:
            self.result.setText("‚ö†Ô∏è –ü–∞—Ä–æ–ª—å –∑–Ω–∞–π–¥–µ–Ω–æ –≤ —Å–ø–∏—Å–∫—É –Ω–µ–±–µ–∑–ø–µ—á–Ω–∏—Ö! –°–ø—Ä–æ–±—É–π—Ç–µ —ñ–Ω—à–∏–π.")
            self.strength_label.setText("")
        else:
            self.result.setText("‚úÖ –ü–∞—Ä–æ–ª—å –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ –≤ —Å–ø–∏—Å–∫—É –Ω–µ–±–µ–∑–ø–µ—á–Ω–∏—Ö.")
            self.strength_label.setText("")

    def estimate_crack_time(self):
        password = self.input.text()
        if not password:
            self.result.setText("‚ö†Ô∏è –°–ø–æ—á–∞—Ç–∫—É –≤–≤–µ–¥–∏ –ø–∞—Ä–æ–ª—å.")
            self.strength_label.setText("")
            return

        has_digit = any(char.isdigit() for char in password)
        has_upper = any(char.isupper() for char in password)
        has_lower = any(char.islower() for char in password)
        has_special = any(char in string.punctuation for char in password)

        charset_size = 0
        if has_digit:
            charset_size += 10
        if has_lower:
            charset_size += 26
        if has_upper:
            charset_size += 26
        if has_special:
            charset_size += 33  # –ø—Ä–∏–±–ª–∏–∑–Ω–æ

        if charset_size == 0:
            self.result.setText("‚ö†Ô∏è –°–∏–º–≤–æ–ª–∏ –Ω–µ –≤–∏—è–≤–ª–µ–Ω—ñ.")
            return

        combinations = charset_size ** len(password)
        guess_rate_user = 1_000_000      # 1 –º–ª–Ω/—Å–µ–∫
        guess_rate_super = 1_000_000_000 # 1 –º–ª—Ä–¥/—Å–µ–∫

        seconds_user = combinations / guess_rate_user
        seconds_super = combinations / guess_rate_super

        def format_time(seconds):
            if seconds < 60:
                return f"{seconds:.2f} —Å–µ–∫—É–Ω–¥"
            elif seconds < 3600:
                return f"{seconds/60:.2f} —Ö–≤–∏–ª–∏–Ω"
            elif seconds < 86400:
                return f"{seconds/3600:.2f} –≥–æ–¥–∏–Ω"
            elif seconds < 31536000:
                return f"{seconds/86400:.2f} –¥–Ω—ñ–≤"
            else:
                return f"{seconds/31536000:.2f} —Ä–æ–∫—ñ–≤"

        message = (
            "‚è±Ô∏è –û—Ü—ñ–Ω–∫–∞ —á–∞—Å—É –¥–ª—è –ø–µ—Ä–µ–±–æ—Ä—É –ø–∞—Ä–æ–ª—è:\n\n"
            f"üñ•Ô∏è –ù–∞ –∑–≤–∏—á–∞–π–Ω–æ–º—É –ü–ö: {format_time(seconds_user)}\n"
            f"üíª –ù–∞ —Å—É–ø–µ—Ä–∫–æ–º–ø‚Äô—é—Ç–µ—Ä—ñ: {format_time(seconds_super)}"
        )

        self.result.setText(message)
        self.strength_label.setText("")


    def show_length_input(self):
        self.start_generate_button.hide()     # —Ö–æ–≤–∞—î–º–æ –ø–µ—Ä—à—É –∫–Ω–æ–ø–∫—É
        self.length_input.show()              # –ø–æ–∫–∞–∑—É—î–º–æ –ø–æ–ª–µ –¥–æ–≤–∂–∏–Ω–∏
        self.generate_button.show()   
        self.result.setText("")
        self.strength_label.setText("")        # –ø–æ–∫–∞–∑—É—î–º–æ –∫–Ω–æ–ø–∫—É "–ó–≥–µ–Ω–µ—Ä—É–≤–∞—Ç–∏"

    def generate_password(self):
        try:
            length = int(self.length_input.text())
            if length < 0 or length > 100:
                self.result.setText("‚ö†Ô∏è –î–æ–≤–∂–∏–Ω–∞ –º–∞—î –±—É—Ç–∏ –≤—ñ–¥ 1 –¥–æ 100.")
                self.strength_label.setText("")
                return
        except ValueError:
            self.result.setText("‚ö†Ô∏è –í–≤–µ–¥–∏ —Ü—ñ–ª–µ —á–∏—Å–ª–æ –¥–ª—è –¥–æ–≤–∂–∏–Ω–∏.")
            self.strength_label.setText("")
            return

        chars = string.ascii_letters + string.digits + string.punctuation
        password = ''.join(random.choice(chars) for _ in range(length))

        self.input.setText(password)
        self.result.setText(f"üîê –ó–≥–µ–Ω–µ—Ä–æ–≤–∞–Ω–æ –ø–∞—Ä–æ–ª—å –∑ {length} —Å–∏–º–≤–æ–ª—ñ–≤.")
        self.strength_label.setText("")
        self.start_generate_button.show()     # —Ö–æ–≤–∞—î–º–æ –ø–µ—Ä—à—É –∫–Ω–æ–ø–∫—É
        self.length_input.hide()              # –ø–æ–∫–∞–∑—É—î–º–æ –ø–æ–ª–µ –¥–æ–≤–∂–∏–Ω–∏
        self.generate_button.hide()           # –ø–æ–∫–∞–∑—É—î–º–æ –∫–Ω–æ–ø–∫—É "–ó–≥–µ–Ω–µ—Ä—É–≤–∞—Ç–∏"
        self.result.setText("")

# üîπ –ó–∞–ø—É—Å–∫ –ø—Ä–æ–≥—Ä–∞–º–∏
app = QApplication(sys.argv)
window = PasswordChecker()
window.show()
sys.exit(app.exec_())
